// public/robots.txt
User-agent: *
Allow: /
Disallow: /admin/
Disallow: /private/
Disallow: /*?*
Disallow: /search*
Disallow: /404

# Specific bot instructions
User-agent: Googlebot
Allow: /
Crawl-delay: 1

User-agent: Bingbot
Allow: /
Crawl-delay: 2

# Sitemap location
Sitemap: https://successodyssey.netlify.app/sitemap.xml
Sitemap: https://successodyssey.netlify.app/sitemap-products.xml
Sitemap: https://successodyssey.netlify.app/sitemap-blog.xml

# Host directive
Host: https://successodyssey.netlify.app

---

// astro.config.mjs - Enhanced SEO Configuration
import { defineConfig } from 'astro/config';
import sitemap from '@astrojs/sitemap';

export default defineConfig({
  site: 'https://successodyssey.netlify.app',

  integrations: [
    sitemap({
      // Custom sitemap configuration
      customPages: [
        'https://successodyssey.netlify.app/products',
        'https://successodyssey.netlify.app/blog',
        'https://successodyssey.netlify.app/about',
        'https://successodyssey.netlify.app/contact',
        'https://successodyssey.netlify.app/privacy',
        'https://successodyssey.netlify.app/terms'
      ],

      // Priority and change frequency
      serialize: (item) => {
        // Homepage gets highest priority
        if (item.url === 'https://successodyssey.netlify.app/') {
          return {
            ...item,
            priority: 1.0,
            changefreq: 'weekly'
          };
        }

        // Product pages high priority
        if (item.url.includes('/products')) {
          return {
            ...item,
            priority: 0.9,
            changefreq: 'monthly'
          };
        }

        // Blog posts medium-high priority
        if (item.url.includes('/blog/')) {
          return {
            ...item,
            priority: 0.8,
            changefreq: 'monthly'
          };
        }

        // Other pages lower priority
        return {
          ...item,
          priority: 0.6,
          changefreq: 'yearly'
        };
      },

      // Filter out certain URLs
      filter: (page) =>
        !page.includes('/admin') &&
        !page.includes('/private') &&
        !page.includes('/404'),
    }),
  ],

  build: {
    assets: '_assets',
    inlineStylesheets: 'auto',
  },

  image: {
    domains: ['successodyssey.netlify.app'],
  },

  markdown: {
    shikiConfig: {
      theme: 'github-light',
      wrap: true,
    },
  },

  vite: {
    build: {
      rollupOptions: {
        external: [],
      },
      cssCodeSplit: true,
      minify: 'terser',
      terserOptions: {
        compress: {
          drop_console: true,
          drop_debugger: true,
        },
      },
    },
  },

  server: {
    port: 4321,
    host: true,
  },
});

---

// src/utils/seo.js - SEO Helper Functions
export function generateSlug(text) {
  return text
    .toLowerCase()
    .replace(/[^\w\s-]/g, '') // Remove special characters
    .replace(/\s+/g, '-') // Replace spaces with hyphens
    .replace(/-+/g, '-') // Replace multiple hyphens with single
    .trim();
}

export function truncateDescription(text, maxLength = 160) {
  if (text.length <= maxLength) return text;
  return text.substring(0, maxLength - 3).trim() + '...';
}

export function generateKeywords(title, category, tags = []) {
  const baseKeywords = [
    'success odyssey',
    'personal development',
    'productivity',
    'mindfulness'
  ];

  const titleWords = title.toLowerCase().split(' ')
    .filter(word => word.length > 3);

  const categoryKeywords = category ? [category.toLowerCase()] : [];

  return [...baseKeywords, ...titleWords, ...categoryKeywords, ...tags]
    .join(', ');
}

export function generateSchemaOrg(type, data) {
  const baseSchema = {
    '@context': 'https://schema.org',
    '@type': type,
    ...data
  };

  return JSON.stringify(baseSchema);
}

// Product schema helper
export function generateProductSchema({
  name,
  description,
  price,
  currency = 'USD',
  availability = 'InStock',
  brand = 'Success Odyssey',
  category,
  image,
  url
}) {
  return generateSchemaOrg('Product', {
    name,
    description,
    brand: {
      '@type': 'Brand',
      name: brand
    },
    category,
    image,
    url,
    offers: {
      '@type': 'Offer',
      price,
      priceCurrency: currency,
      availability: `https://schema.org/${availability}`,
      url,
      seller: {
        '@type': 'Organization',
        name: brand
      }
    }
  });
}

// FAQ schema helper
export function generateFAQSchema(faqs) {
  return generateSchemaOrg('FAQPage', {
    mainEntity: faqs.map(faq => ({
      '@type': 'Question',
      name: faq.question,
      acceptedAnswer: {
        '@type': 'Answer',
        text: faq.answer
      }
    }))
  });
}

---

// src/components/SEOHead.astro - Dedicated SEO Component
---
import { truncateDescription, generateKeywords } from '../utils/seo.js';

export interface Props {
  title: string;
  description?: string;
  keywords?: string;
  image?: string;
  type?: 'website' | 'article' | 'product';
  price?: string;
  category?: string;
  publishedDate?: string;
  modifiedDate?: string;
  noindex?: boolean;
  canonicalUrl?: string;
  structuredData?: object;
}

const {
  title,
  description = "Transform your life with proven strategies and timeless wisdom for personal development.",
  keywords,
  image = "/assets/banner.jpg",
  type = 'website',
  price,
  category,
  publishedDate,
  modifiedDate,
  noindex = false,
  canonicalUrl,
  structuredData
} = Astro.props;

// Process data
const finalDescription = truncateDescription(description);
const finalKeywords = keywords || generateKeywords(title, category);
const finalCanonical = canonicalUrl || new URL(Astro.url.pathname, Astro.site).toString();
const imageUrl = new URL(image, Astro.site).toString();

// Generate structured data
let finalStructuredData = structuredData;
if (!finalStructuredData && type === 'product' && price) {
  finalStructuredData = {
    '@context': 'https://schema.org',
    '@type': 'Product',
    name: title,
    description: finalDescription,
    image: imageUrl,
    offers: {
      '@type': 'Offer',
      price: price,
      priceCurrency: 'USD',
      availability: 'https://schema.org/InStock'
    }
  };
}
---

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={finalDescription} />
<meta name="keywords" content={finalKeywords} />
<link rel="canonical" href={finalCanonical} />

<!-- Robots -->
<meta name="robots" content={noindex ? "noindex,nofollow" : "index,follow,max-snippet:-1,max-image-preview:large,max-video-preview:-1"} />

<!-- Open Graph -->
<meta property="og:type" content={type} />
<meta property="og:url" content={finalCanonical} />
<meta property="og:title" content={title} />
<meta property="og:description" content={finalDescription} />
<meta property="og:image" content={imageUrl} />
<meta property="og:site_name" content="Success Odyssey" />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={finalCanonical} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={finalDescription} />
<meta property="twitter:image" content={imageUrl} />

<!-- Article-specific tags -->
{type === 'article' && publishedDate && (
  <>
    <meta property="article:published_time" content={publishedDate} />
    <meta property="article:modified_time" content={modifiedDate || new Date().toISOString()} />
  </>
)}

<!-- Product-specific tags -->
{type === 'product' && price && (
  <>
    <meta property="product:price:amount" content={price} />
    <meta property="product:price:currency" content="USD" />
  </>
)}

<!-- Structured Data -->
{finalStructuredData && (
  <script type="application/ld+json" set:html={JSON.stringify(finalStructuredData)} />
)}

---

// Example: Product Page with Full SEO
// pages/products/digital-life-planner.astro
---
import Layout from "../../layouts/Layout.astro";
import SEOHead from "../../components/SEOHead.astro";
import { generateProductSchema } from "../../utils/seo.js";

const productData = {
  name: "Digital Life Planner 2025 - Notion Template",
  description: "Transform your productivity with our comprehensive digital life planner. Includes goal tracking, habit formation, weekly planning, and reflection templates. Perfect for entrepreneurs, students, and anyone serious about personal growth.",
  price: "19.99",
  category: "Digital Templates",
  image: "/assets/digital-planner-hero.jpg",
  features: [
    "50+ Pre-built Templates",
    "Goal Tracking System",
    "Habit Formation Tracker",
    "Weekly & Monthly Planning",
    "Reflection Frameworks",
    "Financial Tracker",
    "Project Management Dashboard",
    "Lifetime Updates"
  ],
  benefits: [
    "Increase productivity by 40%",
    "Better goal achievement rate",
    "Improved work-life balance",
    "Reduced stress and overwhelm"
  ]
};

const structuredData = generateProductSchema({
  name: productData.name,
  description: productData.description,
  price: productData.price,
  category: productData.category,
  image: new URL(productData.image, Astro.site).toString(),
  url: new URL(Astro.url, Astro.site).toString()
});
---

<html lang="en">
<head>
  <SEOHead
    title={`${productData.name} | Success Odyssey`}
    description={productData.description}
    keywords="digital life planner, notion template, productivity planner, goal tracking, habit tracker, weekly planner, personal development, organization system"
    type="product"
    price={productData.price}
    category={productData.category}
    image={productData.image}
    structuredData={JSON.parse(structuredData)}
  />
</head>
<body>
  <!-- Product page content here -->
</body>
</html>