<!-- components/JsonLD.astro -->
---
export interface Props {
  type: 'website' | 'article' | 'blog' | 'product';
  title: string;
  description: string;
  image?: string;
  keywords?: string;
  datePublished?: string;
  dateModified?: string;
  author?: string;
  wordCount?: number;
  price?: string;
  currency?: string;
  availability?: string;
}

const {
  type = 'website',
  title,
  description,
  image = '/assets/images/banner.webp',
  keywords = 'success, philosophy, personal development',
  datePublished,
  dateModified,
  author = 'Success Odyssey Hub',
  wordCount,
  price,
  currency = 'USD',
  availability = 'InStock'
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const imageSrc = typeof image === 'object' && image !== null && 'src' in image ? image.src : image;
const imageURL = (typeof imageSrc === 'string' && (imageSrc.startsWith('http') || imageSrc.startsWith('//') || imageSrc.startsWith('/_astro') || imageSrc.startsWith('/_assets')))
  ? imageSrc
  : new URL(imageSrc, Astro.site).toString();

const currentDate = new Date().toISOString();

const baseSchema = {
  '@context': 'https://schema.org',
  '@type': type === 'product' ? 'Product' : (type === 'article' || type === 'blog' ? 'BlogPosting' : 'WebSite'),
  name: title,
  description,
  url: canonicalURL.toString(),
  image: {
    '@type': 'ImageObject',
    url: imageURL,
    width: 1200,
    height: 630
  },
  author: {
    '@type': 'Organization',
    name: author,
    url: Astro.site?.toString()
  },
  publisher: {
    '@type': 'Organization',
    name: 'Success Odyssey Hub',
    url: Astro.site?.toString(),
    logo: {
      '@type': 'ImageObject',
      url: new URL('/assets/logo.png', Astro.site).toString(),
      width: 120,
      height: 120
    }
  }
};

// Article/Blog specific schema
if (type === 'article' || type === 'blog') {
  baseSchema['@type'] = 'BlogPosting';
  baseSchema.headline = title;
  baseSchema.articleSection = 'Personal Development';
  baseSchema.inLanguage = 'en-US';

  if (keywords) {
    baseSchema.keywords = keywords.split(', ');
  }

  if (datePublished) {
    baseSchema.datePublished = datePublished;
    baseSchema.dateModified = dateModified || datePublished;
  } else {
    baseSchema.datePublished = currentDate;
    baseSchema.dateModified = currentDate;
  }

  baseSchema.mainEntityOfPage = {
    '@type': 'WebPage',
    '@id': canonicalURL.toString()
  };

  // Word count
  if (wordCount) {
    baseSchema.wordCount = wordCount;
  } else {
    // Estimate based on description
    baseSchema.wordCount = description.split(' ').length * 50;
  }
}

// Product specific schema
if (type === 'product' && price) {
  baseSchema.offers = {
    '@type': 'Offer',
    price: price,
    priceCurrency: currency,
    availability: `https://schema.org/${availability}`,
    url: canonicalURL.toString()
  };
}

// Website specific schema
if (type === 'website' && Astro.url.pathname === '/') {
  baseSchema.potentialAction = {
    '@type': 'SearchAction',
    target: `${Astro.site}blog?search={search_term_string}`,
    'query-input': 'required name=search_term_string'
  };
}
---

<script type="application/ld+json" set:html={JSON.stringify(baseSchema)} />